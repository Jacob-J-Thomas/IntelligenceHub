using IntelligenceHub.API.DTOs;

namespace IntelligenceHub.Business.Interfaces
{
    /// <summary>
    /// Business logic for processing requests to the completion controller.
    /// </summary>
    public interface ICompletionLogic
    {
        /// <summary>
        /// Streams completion updates to the requesting client.
        /// </summary>
        /// <param name="completionRequest">The body of the completion request.</param>
        /// <returns>An asynchronous enumerable that contains the completion response generated from an AGI client.</returns>
        IAsyncEnumerable<APIResponseWrapper<CompletionStreamChunk>> StreamCompletion(CompletionRequest completionRequest);

        /// <summary>
        /// Processes a completion request and returns the completion response.
        /// </summary>
        /// <param name="completionRequest">The body of the completion request.</param>
        /// <returns>An <see cref="APIResponseWrapper{CompletionResponse}"/> containing a completion generated by an AGI client.</returns>
        Task<APIResponseWrapper<CompletionResponse>> ProcessCompletion(CompletionRequest completionRequest);

        /// <summary>
        /// Processes and executes any tool calls that are present in a completion response.
        /// </summary>
        /// <param name="toolCalls">A dictionary of function names, and their arguments.</param>
        /// <param name="messages">The conversation history used as context for the Chat Recursion system tool.</param>
        /// <param name="options">The AI client profile options associated with the request being processed.</param>
        /// <param name="conversationId">The ToolId of the conversation being processed.</param>
        /// <param name="currentRecursionDepth">The current depth of recursion used to prevent infinite looping
        /// resulting from the Chat Recursion system tool.</param>
        /// <returns>An <see cref="APIResponseWrapper{Tuple}"/> containing a tuple of the HTTP responses associated with tools executed by the tool client, and any 
        /// new messages generated from the Chat Recursion system tool.</returns>
        Task<APIResponseWrapper<(List<HttpResponseMessage>, List<Message>)>> ExecuteTools(Dictionary<string, string> toolCalls, List<Message> messages, Profile? options = null, Guid? conversationId = null, int currentRecursionDepth = 0);
    }
}
